# -*- coding: utf-8 -*-
"""
Created on Sun May 11 23:26:42 2025
@author: PC
"""

import streamlit as st
import pandas as pd
import re
import requests
import time
import logging

logging.basicConfig(filename='app.log', level=logging.DEBUG)

st.set_page_config(page_title="Moodle User & Course CSV Generator", layout="centered")
st.title("üì• Qu·∫£n l√Ω l·ªõp h·ªçc tr√™n Moodle")

st.markdown(
    """
    <style>
    [data-testid="stToolbar"] {
            visibility: hidden;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# H√†m ki·ªÉm tra k·∫øt n·ªëi server ƒë√£ s·ª≠a (d√πng HTTP thay v√¨ ping)
def check_server_connectivity(moodle_url):
    try:
        if not moodle_url.startswith(('http://', 'https://')):
            st.error("URL Moodle ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng http:// ho·∫∑c https://.")
            logging.error("URL kh√¥ng h·ª£p l·ªá: %s", moodle_url)
            return False
        
        # Th·ª≠ truy c·∫≠p trang login c·ªßa Moodle
        test_url = f"{moodle_url.rstrip('/')}/login/index.php"
        response = requests.get(test_url, timeout=10)
        if response.status_code in [200, 303]:  # 200: OK, 303: Redirect (th∆∞·ªùng v·ªõi Moodle)
            logging.debug("K·∫øt n·ªëi server Moodle th√†nh c√¥ng: %s", test_url)
            return True
        else:
            st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server Moodle (HTTP {response.status_code}). Ki·ªÉm tra URL ho·∫∑c server.")
            logging.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server: HTTP %s", response.status_code)
            return False
    except requests.exceptions.RequestException as e:
        st.error(f"L·ªói ki·ªÉm tra k·∫øt n·ªëi t·ªõi server Moodle: {str(e)}. Ki·ªÉm tra m·∫°ng, firewall, ho·∫∑c URL.")
        logging.error("L·ªói ki·ªÉm tra k·∫øt n·ªëi: %s", str(e))
        return False

# H√†m g·ªçi API Moodle
def moodle_api_call(function_name, params, moodle_url, token):
    try:
        if not moodle_url or not token:
            st.error("URL Moodle ho·∫∑c API Token r·ªóng. Vui l√≤ng ki·ªÉm tra.")
            logging.error("URL ho·∫∑c token r·ªóng.")
            return None
        if not moodle_url.startswith(('http://', 'https://')):
            st.error("URL Moodle ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng http:// ho·∫∑c https://.")
            logging.error("URL kh√¥ng h·ª£p l·ªá: %s", moodle_url)
            return None
        
        # Ki·ªÉm tra k·∫øt n·ªëi server
        if not check_server_connectivity(moodle_url):
            return None

        url = f"{moodle_url.rstrip('/')}/webservice/rest/server.php"
        params.update({
            'wstoken': token,
            'wsfunction': function_name,
            'moodlewsrestformat': 'json'
        })
        logging.debug("G·ªçi API: %s v·ªõi params: %s", url, params)
        response = requests.get(url, params=params, timeout=15)
        logging.debug("Ph·∫£n h·ªìi HTTP: %s", response.status_code)
        if response.status_code == 200:
            result = response.json()
            logging.debug("Ph·∫£n h·ªìi JSON: %s", result)
            if 'exception' in result:
                error_msg = result.get('message', 'Kh√¥ng c√≥ th√¥ng tin l·ªói')
                st.error(f"L·ªói API {function_name}: {error_msg}. "
                         f"Ki·ªÉm tra quy·ªÅn token ('moodle/user:viewdetails', 'moodle/user:viewhiddendetails'), "
                         f"'Ng∆∞·ªùi d√πng ƒë∆∞·ª£c ·ªßy quy·ªÅn', ho·∫∑c th·ª≠ t·∫°o token m·ªõi.")
                logging.error("L·ªói API %s: %s", function_name, error_msg)
                return None
            return result
        else:
            st.error(f"L·ªói khi g·ªçi API {function_name}: HTTP {response.status_code} - {response.text}. "
                     f"Ki·ªÉm tra URL Moodle, token, ho·∫∑c d·ªãch v·ª• web.")
            logging.error("L·ªói HTTP %s: %s", response.status_code, response.text)
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"L·ªói k·∫øt n·ªëi API {function_name}: {str(e)}. Ki·ªÉm tra m·∫°ng ho·∫∑c server Moodle.")
        logging.error("L·ªói k·∫øt n·ªëi: %s", str(e))
        return None

# Ki·ªÉm tra token h·ª£p l·ªá ƒë√£ s·ª≠a
def validate_token(moodle_url, token):
    test_username = st.session_state.get('test_username', 'admin')
    if not test_username:
        st.error("Username ki·ªÉm tra token r·ªóng. Vui l√≤ng nh·∫≠p username h·ª£p l·ªá.")
        logging.error("Username ki·ªÉm tra r·ªóng.")
        return False
    
    params = {'criteria[0][key]': 'username', 'criteria[0][value]': test_username}
    result = moodle_api_call('core_user_get_users', params, moodle_url, token)
    if result is None:
        st.error(f"Kh√¥ng th·ªÉ x√°c th·ª±c token. Ki·ªÉm tra token, URL, quy·ªÅn ('moodle/user:viewdetails'), "
                 f"v√† t√†i kho·∫£n '{test_username}' t·ªìn t·∫°i. N·∫øu th·∫•t b·∫°i, th·ª≠ username kh√°c.")
        logging.error("Kh√¥ng th·ªÉ x√°c th·ª±c token cho username: %s", test_username)
        return False
    elif not result.get('users'):
        st.warning(f"T√†i kho·∫£n '{test_username}' kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Th·ª≠ username kh√°c.")
        logging.warning("Kh√¥ng t√¨m th·∫•y user: %s", test_username)
        return False
    st.success("Token h·ª£p l·ªá!")
    return True

# Giao di·ªán Streamlit ƒë√£ s·ª≠a
tab1, tab2 = st.tabs(["üìÑ M·ªôt File", "üìÇ Nhi·ªÅu File"])

with tab1:
    st.header("üìÑ X·ª≠ l√Ω M·ªôt File Excel")
    moodle_url = st.text_input("üåê URL Moodle (VD: https://your-moodle-site.com):")
    moodle_token = st.text_input("üîë API Token:", type="password")
    test_username = st.text_input("üîë Username ki·ªÉm tra token (m·∫∑c ƒë·ªãnh: admin):", value="admin")
    st.session_state['test_username'] = test_username  # L∆∞u username
    
    if moodle_url and moodle_token and st.button("üîç Ki·ªÉm tra Token"):
        if validate_token(moodle_url, moodle_token):
            st.success("Token h·ª£p l·ªá!")
        else:
            st.error("Token kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu quy·ªÅn. Ki·ªÉm tra token, URL, quy·ªÅn ('moodle/user:viewdetails'), "
                     f"v√† t√†i kho·∫£n '{test_username}' trong Moodle.")

    uploaded_file = st.file_uploader("Ch·ªçn file Excel", type=["xls", "xlsx"])
    username_gv = st.text_input("üë®‚Äçüè´ Username Gi·∫£ng Vi√™n:")
    fullname_gv = st.text_input("üë®‚Äçüè´ H·ªç v√† T√™n Gi·∫£ng Vi√™n:")
    category_id = st.text_input("üìÇ Category ID:", value="15")
    role_gv = st.selectbox("üë§ Vai tr√≤ Gi·∫£ng Vi√™n:", [("Gi·∫£ng vi√™n", 3), ("Sinh vi√™n", 5)], index=0)
    role_sv = st.selectbox("üë§ Vai tr√≤ Sinh Vi√™n:", [("Sinh vi√™n", 5), ("Gi·∫£ng vi√™n", 3)], index=0)

    if st.button("üöÄ X·ª≠ l√Ω v√† C·∫≠p nh·∫≠t qua API"):
        if not (uploaded_file and username_gv and fullname_gv and moodle_url and moodle_token):
            st.error("Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß file, th√¥ng tin gi·∫£ng vi√™n, URL Moodle v√† API Token.")
        else:
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                try:
                    students, course_code, course_name = process_excel(uploaded_file)
                    if not students:
                        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ x·ª≠ l√Ω.")
                        st.stop()
                    
                    course_id = create_or_update_course(course_code, f"{course_name}_GV: {fullname_gv}", 
                                                      category_id, moodle_url, moodle_token)
                    if not course_id:
                        st.error("Kh√¥ng th·ªÉ t·∫°o ho·∫∑c c·∫≠p nh·∫≠t kh√≥a h·ªçc. Ki·ªÉm tra token, URL, ho·∫∑c category ID.")
                        st.stop()
                    
                    gv_ho_lot, gv_ten = split_name(fullname_gv)
                    teacher = [{
                        'username': username_gv,
                        'password': 'Kcntt@2xxx',
                        'firstname': gv_ho_lot,
                        'lastname': gv_ten,
                        'email': f"{username_gv}@ntt.edu.vn",
                        'course1': course_code
                    }]
                    enroll_users(teacher, course_id, role_gv[1], moodle_url, moodle_token)
                    enroll_users(students, course_id, role_sv[1], moodle_url, moodle_token)

                    all_users = teacher + students
                    df_users = pd.DataFrame(all_users)
                    df_course = pd.DataFrame([{
                        'shortname': course_code,
                        'fullname': f"{course_name}_GV: {fullname_gv}",
                        'category': category_id
                    }])
                    st.dataframe(df_users.head(10))
                    st.download_button(
                        "‚¨áÔ∏è T·∫£i file Ng∆∞·ªùi D√πng",
                        df_users.to_csv(index=False).encode('utf-8-sig'),
                        file_name="moodle_user_upload.csv",
                        mime="text/csv"
                    )
                    st.dataframe(df_course)
                    st.download_button(
                        "‚¨áÔ∏è T·∫£i file L·ªõp H·ªçc",
                        df_course.to_csv(index=False).encode('utf-8-sig'),
                        file_name="moodle_course_upload.csv",
                        mime="text/csv"
                    )
                except Exception as e:
                    st.error(f"L·ªói x·ª≠ l√Ω: {str(e)}")

# Tab Nhi·ªÅu File (gi·ªØ nguy√™n, kh√¥ng hi·ªÉn th·ªã ƒë·ªÉ ng·∫Øn g·ªçn)
with tab2:
    st.header("üìÇ X·ª≠ l√Ω Nhi·ªÅu File Excel")
    moodle_url_multi = st.text_input("üåê URL Moodle (Nhi·ªÅu File):")
    moodle_token_multi = st.text_input("üîë API Token (Nhi·ªÅu File):", type="password")
    
    if moodle_url_multi and moodle_token_multi and st.button("üîç Ki·ªÉm tra Token (Nhi·ªÅu File)"):
        if validate_token(moodle_url_multi, moodle_token_multi):
            st.success("Token h·ª£p l·ªá!")
        else:
            st.error("Token kh√¥ng h·ª£p l·ªá ho·∫∑c URL Moodle sai. Ki·ªÉm tra URL v√† token trong Moodle.")

    uploaded_files = st.file_uploader("Ch·ªçn nhi·ªÅu file Excel", type=["xls", "xlsx"], accept_multiple_files=True)
    username_gv_multi = st.text_input("üë®‚Äçüè´ Username Gi·∫£ng Vi√™n cho T·∫•t C·∫£:")
    fullname_gv_multi = st.text_input("üë®‚Äçüè´ H·ªç v√† T√™n Gi·∫£ng Vi√™n cho T·∫•t C·∫£:")
    category_id_multi = st.text_input("üìÇ Category ID cho T·∫•t C·∫£:", value="15")
    role_gv_multi = st.selectbox("üë§ Vai tr√≤ Gi·∫£ng Vi√™n (Nhi·ªÅu File):", [("Gi·∫£ng vi√™n", 3), ("Sinh vi√™n", 5)], index=0)
    role_sv_multi = st.selectbox("üë§ Vai tr√≤ Sinh Vi√™n (Nhi·ªÅu File):", [("Sinh vi√™n", 5), ("Gi·∫£ng vi√™n", 3)], index=0)

    if st.button("üöÄ X·ª≠ l√Ω v√† C·∫≠p nh·∫≠t qua API (Nhi·ªÅu File)"):
        if not (uploaded_files and username_gv_multi and fullname_gv_multi and moodle_url_multi and moodle_token_multi):
            st.error("Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß file, th√¥ng tin gi·∫£ng vi√™n, URL Moodle v√† API Token.")
        else:
            with st.spinner("ƒêang x·ª≠ l√Ω c√°c file..."):
                all_user_records, all_course_records = [], []
                gv_ho_lot_multi, gv_ten_multi = split_name(fullname_gv_multi)
                progress_bar = st.progress(0)
                total_files = len(uploaded_files)

                for i, file in enumerate(uploaded_files):
                    try:
                        students, course_code, course_name = process_excel(file)
                        if not students:
                            st.warning(f"File {file.name} kh√¥ng c√≥ sinh vi√™n h·ª£p l·ªá.")
                            continue
                        
                        course_id = create_or_update_course(course_code, f"{course_name}_GV: {fullname_gv_multi}", 
                                                           category_id_multi, moodle_url_multi, moodle_token_multi)
                        if not course_id:
                            st.error(f"Kh√¥ng th·ªÉ t·∫°o/c·∫≠p nh·∫≠t kh√≥a h·ªçc cho file {file.name}. Ki·ªÉm tra token, URL, ho·∫∑c category ID.")
                            continue
                        
                        teacher = [{
                            'username': username_gv_multi,
                            'password': 'Kcntt@2xxx',
                            'firstname': gv_ho_lot_multi,
                            'lastname': gv_ten_multi,
                            'email': f"{username_gv_multi}@ntt.edu.vn",
                            'course1': course_code
                        }]
                        enroll_users(teacher, course_id, role_gv_multi[1], moodle_url_multi, moodle_token_multi)
                        enroll_users(students, course_id, role_sv_multi[1], moodle_url_multi, moodle_token_multi)

                        all_user_records.extend(teacher + students)
                        all_course_records.append({
                            'shortname': course_code,
                            'fullname': f"{course_name}_GV: {fullname_gv_multi}",
                            'category': category_id_multi
                        })

                        progress_bar.progress((i + 1) / total_files)
                    except Exception as e:
                        st.error(f"L·ªói khi x·ª≠ l√Ω file {file.name}: {str(e)}")

                if all_user_records:
                    df_users_all = pd.DataFrame(all_user_records)
                    df_courses_all = pd.DataFrame(all_course_records)
                    st.dataframe(df_users_all.head(10))
                    st.download_button(
                        "‚¨áÔ∏è T·∫£i file Ng∆∞·ªùi D√πng (T·∫•t C·∫£)",
                        df_users_all.to_csv(index=False).encode('utf-8-sig'),
                        file_name="moodle_user_upload_all.csv",
                        mime="text/csv"
                    )
                    st.dataframe(df_courses_all)
                    st.download_button(
                        "‚¨áÔ∏è T·∫£i file L·ªõp H·ªçc (T·∫•t C·∫£)",
                        df_courses_all.to_csv(index=False).encode('utf-8-sig'),
                        file_name="moodle_course_upload_all.csv",
                        mime="text/csv"
                    )
                else:
                    st.error("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ t·∫°o CSV.")
